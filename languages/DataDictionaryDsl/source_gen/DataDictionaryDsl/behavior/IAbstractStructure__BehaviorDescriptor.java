package DataDictionaryDsl.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class IAbstractStructure__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x7171b68977873e5L, "DataDictionaryDsl.structure.IAbstractStructure");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Integer> getFieldCount_id21H$u621wMk = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("getFieldCount").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("21H$u621wMk").registry(REGISTRY).build();
  public static final SMethod<Void> createFieldDefinition_id6O3$yg35ULU = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("createFieldDefinition").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6O3$yg35ULU").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> ifExistFieldName_id397t8_oCAS2 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.class)).name("ifExistFieldName").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("397t8_oCAS2").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getFieldCount_id21H$u621wMk, createFieldDefinition_id6O3$yg35ULU, ifExistFieldName_id397t8_oCAS2);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static int getFieldCount_id21H$u621wMk(@NotNull SNode __thisNode__) {
    int count = 0;

    for (SNode element : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x7171b68977873e5L, 0x7171b68977873e9L, "elements")))) {
      if (SNodeOperations.isInstanceOf(element, MetaAdapterFactory.getConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9c14433L, "DataDictionaryDsl.structure.Field"))) {
        count++;
      } else {
        count += (int) IAbstractElement__BehaviorDescriptor.getFieldCount_id21H$u621wMk.invoke(element);
      }
    }

    return count;
  }
  /*package*/ static void createFieldDefinition_id6O3$yg35ULU(@NotNull SNode __thisNode__, List<SNode> fieldDefinitions) {
    for (SNode element : SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x7171b68977873e5L, 0x7171b68977873e9L, "elements"))) {
      if (SNodeOperations.isInstanceOf(element, MetaAdapterFactory.getConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9c14433L, "DataDictionaryDsl.structure.Field"))) {
        SNode field = (SNode) element;
        SNode fieldDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x160766bd4338602aL, "DataDictionaryDsl.structure.FieldDefinition"));
        SLinkOperations.setTarget(fieldDefinition, MetaAdapterFactory.getReferenceLink(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x160766bd4338602aL, 0x160766bd4338602bL, "field"), field);
        SLinkOperations.setTarget(fieldDefinition, MetaAdapterFactory.getContainmentLink(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x160766bd4338602aL, 0x160766bd4338604bL, "domain"), SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x160766bd43386035L, "DataDictionaryDsl.structure.AbstractDomain")));
        SLinkOperations.setTarget(fieldDefinition, MetaAdapterFactory.getContainmentLink(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x160766bd4338602aL, 0x605f2c5169ea95c8L, "constraint"), SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x605f2c5169ea95c5L, "DataDictionaryDsl.structure.Constraint")));
        ListSequence.fromList(fieldDefinitions).addElement(fieldDefinition);
      } else {
        SNode structure = (SNode) element;
        IAbstractElement__BehaviorDescriptor.createFieldDefinition_id6O3$yg35ULU.invoke(structure, fieldDefinitions);
      }
    }
  }
  /*package*/ static Boolean ifExistFieldName_id397t8_oCAS2(@NotNull SNode __thisNode__, SNode field) {
    for (SNode el : SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x7171b68977873e5L, 0x7171b68977873e9L, "elements"))) {
      if (SNodeOperations.isInstanceOf(el, MetaAdapterFactory.getConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9c14433L, "DataDictionaryDsl.structure.Field"))) {
        SNode field1 = (SNode) el;
        if (field != field1 && SPropertyOperations.getString(field1, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equals(SPropertyOperations.getString(field, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
          return true;
        }
      } else {
        SNode structure = (SNode) el;
        IAbstractElement__BehaviorDescriptor.ifExistFieldName_id397t8_oCAS2.invoke(structure, field);
      }
    }
    return false;
  }

  /*package*/ IAbstractStructure__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) getFieldCount_id21H$u621wMk(node));
      case 1:
        createFieldDefinition_id6O3$yg35ULU(node, (List<SNode>) parameters[0]);
        return null;
      case 2:
        return (T) ((Boolean) ifExistFieldName_id397t8_oCAS2(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
